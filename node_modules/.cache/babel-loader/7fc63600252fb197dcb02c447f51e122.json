{"ast":null,"code":"var _jsxFileName = \"/Users/xavier/Projects/GrapesJS-react/src/base-react-component.js\";\n\n/** @jsxImportSource theme-ui */\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"theme-ui/jsx-dev-runtime\";\nexport default (editor => {\n  const domc = editor.Components;\n  const defType = domc.getType('default');\n  const defModel = defType.model;\n  const wrpChld = 'data-chld'; // Main React component\n\n  domc.addType('react-component', {\n    model: {\n      toHTML() {\n        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return defModel.prototype.toHTML.call(this, { ...opts,\n          tag: this.get('type')\n        });\n      }\n\n    },\n    view: {\n      tagName: 'div',\n\n      init() {\n        const {\n          model\n        } = this;\n        this.listenTo(model, 'change:attributes', this.render);\n        this.listenTo(model.components(), 'add remove reset', this.__upRender);\n      },\n\n      getChildrenContainer() {\n        const {\n          childrenContainer\n        } = this;\n        if (childrenContainer) return childrenContainer;\n        this.childrenContainer = document.createElement('childc');\n        return this.childrenContainer;\n      },\n\n      /**\n       * We need this container to understand if the React component is able\n       * to render children\n       */\n      createReactChildWrap() {\n        return /*#__PURE__*/React.createElement('span', {\n          [wrpChld]: true\n        });\n      },\n\n      createReactEl(cmp, props) {\n        return /*#__PURE__*/React.createElement(cmp, props, this.createReactChildWrap());\n      },\n\n      mountReact(cmp, el) {\n        ReactDOM.render(_jsxDEV(ThemeProvider, {\n          theme: funk,\n          children: cmp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), el);\n      },\n\n      render() {\n        const {\n          model,\n          el\n        } = this;\n        this.updateAttributes();\n        this.renderChildren();\n        const reactEl = this.createReactEl(model.get('component'), { ...model.get('attributes')\n        });\n        this.mountReact(reactEl, el);\n        const chld = el.querySelector(\"span[\".concat(wrpChld, \"]\")); // If the container is found, the react component is able to render children\n\n        if (chld) {\n          const chldCont = this.getChildrenContainer();\n\n          while (chldCont.firstChild) {\n            chld.appendChild(chldCont.firstChild);\n          }\n        }\n\n        return this;\n      },\n\n      __upRender() {\n        clearTimeout(this._upr);\n        this._upr = setTimeout(() => this.render());\n      }\n\n    }\n  });\n});","map":{"version":3,"sources":["/Users/xavier/Projects/GrapesJS-react/src/base-react-component.js"],"names":["ReactDOM","React","editor","domc","Components","defType","getType","defModel","model","wrpChld","addType","toHTML","opts","prototype","call","tag","get","view","tagName","init","listenTo","render","components","__upRender","getChildrenContainer","childrenContainer","document","createElement","createReactChildWrap","createReactEl","cmp","props","mountReact","el","funk","updateAttributes","renderChildren","reactEl","chld","querySelector","chldCont","firstChild","appendChild","clearTimeout","_upr","setTimeout"],"mappings":"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","sourcesContent":["/** @jsxImportSource theme-ui */\n\nimport ReactDOM from 'react-dom';\nimport React from 'react';\n\nexport default (editor) => {\n  const domc = editor.Components;\n  const defType = domc.getType('default');\n  const defModel = defType.model;\n  const wrpChld = 'data-chld';\n\n  // Main React component\n  domc.addType('react-component', {\n    model: {\n      toHTML(opts = {}) {\n        return defModel.prototype.toHTML.call(this, {\n          ...opts,\n          tag: this.get('type')\n        });\n      }\n    },\n    view: {\n      tagName: 'div',\n\n      init() {\n        const { model } = this;\n        this.listenTo(model, 'change:attributes', this.render);\n        this.listenTo(model.components(), 'add remove reset', this.__upRender);\n      },\n\n      getChildrenContainer() {\n        const { childrenContainer } = this;\n        if (childrenContainer) return childrenContainer;\n\n        this.childrenContainer = document.createElement('childc');\n\n        return this.childrenContainer;\n      },\n\n      /**\n       * We need this container to understand if the React component is able\n       * to render children\n       */\n      createReactChildWrap() {\n        return React.createElement('span', { [wrpChld]: true });\n      },\n\n      createReactEl(cmp, props) {\n        return React.createElement(cmp, props, this.createReactChildWrap());\n      },\n\n      mountReact(cmp, el) {\n        ReactDOM.render(\n          <ThemeProvider theme={funk}>\n            {cmp}\n          </ThemeProvider>, \n          el);\n      },\n\n      render() {\n        const { model, el } = this;\n        this.updateAttributes();\n        this.renderChildren();\n        const reactEl = this.createReactEl(model.get('component'), {\n          ...model.get('attributes')\n        });\n        this.mountReact(reactEl, el);\n        const chld = el.querySelector(`span[${wrpChld}]`);\n\n        // If the container is found, the react component is able to render children\n        if (chld) {\n          const chldCont = this.getChildrenContainer();\n          while (chldCont.firstChild) {\n            chld.appendChild(chldCont.firstChild);\n          }\n        }\n\n        return this;\n      },\n\n      __upRender() {\n        clearTimeout(this._upr);\n        this._upr = setTimeout(() => this.render());\n      }\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}