{"ast":null,"code":"import React from 'react';\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\nimport { Button, Slider, SnackbarContent } from '@material-ui/core';\nimport { Card, Switch } from 'theme-ui';\nexport default (editor => {\n  const {\n    Blocks,\n    Components\n  } = editor;\n  const sheetsManager = new Map(); // Helper for MUI components\n\n  const addCmp = _ref => {\n    let {\n      type,\n      component,\n      props\n    } = _ref;\n    Components.addType(type, {\n      extend: 'react-component',\n      model: {\n        defaults: { ...props,\n          component\n        }\n      },\n      view: {\n        /**\n         * We need this in order to render MUI styles in the canvas\n         */\n        createReactEl(cmp, props) {\n          const cmpMain = /*#__PURE__*/React.createElement(cmp, props, this.createReactChildWrap());\n          return /*#__PURE__*/React.createElement(StylesProvider, {\n            sheetsManager,\n            jss: create({\n              plugins: [...jssPreset().plugins],\n              insertionPoint: this.em.get('Canvas').getDocument().head\n            })\n          }, cmpMain);\n        }\n\n      },\n      isComponent: el => el.tagName === type.toUpperCase()\n    });\n    Blocks.add(type, {\n      label: type,\n      category: 'MUI',\n      content: {\n        type\n      }\n    });\n    Blocks.add(type, {\n      label: type,\n      category: 'Theme UI',\n      content: {\n        type\n      }\n    });\n  };\n\n  addCmp({\n    type: 'MuiButton',\n    component: Button,\n    props: {\n      attributes: {\n        color: 'primary',\n        variant: 'contained'\n      },\n      components: 'Click me',\n      traits: [{\n        type: 'select',\n        label: 'Variant',\n        name: 'variant',\n        options: [{\n          value: 'contained',\n          name: 'Contained'\n        }, {\n          value: 'outlined',\n          name: 'Outlined'\n        }]\n      }, {\n        type: 'checkbox',\n        label: 'Disabled',\n        name: 'disabled'\n      }, {\n        type: 'select',\n        label: 'Color',\n        name: 'color',\n        options: [{\n          value: 'primary',\n          name: 'Primary'\n        }, {\n          value: 'secondary',\n          name: 'Secondary'\n        }]\n      }]\n    }\n  });\n  addCmp({\n    type: 'Slider',\n    component: Slider,\n    props: {\n      stylable: false,\n      editable: true,\n      void: true,\n      attributes: {\n        min: 0,\n        max: 100\n      },\n      traits: [{\n        type: 'number',\n        label: 'Min',\n        name: 'min'\n      }, {\n        type: 'number',\n        label: 'Max',\n        name: 'max'\n      }]\n    }\n  });\n  addCmp({\n    type: 'Snackbar',\n    component: props => /*#__PURE__*/React.createElement(SnackbarContent, { ...props,\n      message: props.children\n    }),\n    props: {\n      stylable: true,\n      editable: true,\n      traits: []\n    }\n  });\n  addCmp({\n    type: 'Switch',\n    component: props => /*#__PURE__*/React.createElement(Switch, { ...props\n    }),\n    props: {\n      stylable: false,\n      editable: true,\n      traits: []\n    }\n  });\n});","map":{"version":3,"sources":["/Users/xavier/Projects/GrapesJS-react/src/mui-components/index.js"],"names":["React","create","StylesProvider","jssPreset","Button","Slider","SnackbarContent","Card","Switch","editor","Blocks","Components","sheetsManager","Map","addCmp","type","component","props","addType","extend","model","defaults","view","createReactEl","cmp","cmpMain","createElement","createReactChildWrap","jss","plugins","insertionPoint","em","get","getDocument","head","isComponent","el","tagName","toUpperCase","add","label","category","content","attributes","color","variant","components","traits","name","options","value","stylable","editable","void","min","max","message","children"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { create } from 'jss';\nimport { StylesProvider, jssPreset } from '@material-ui/styles';\nimport { Button, Slider, SnackbarContent } from '@material-ui/core';\nimport { Card, Switch } from 'theme-ui';\n\nexport default (editor) => {\n  const { Blocks, Components } = editor;\n  const sheetsManager = new Map();\n\n  // Helper for MUI components\n  const addCmp = ({ type, component, props }) => {\n    Components.addType(type, {\n      extend: 'react-component',\n      model: {\n        defaults: {\n          ...props,\n          component\n        }\n      },\n      view: {\n        /**\n         * We need this in order to render MUI styles in the canvas\n         */\n        createReactEl(cmp, props) {\n          const cmpMain = React.createElement(\n            cmp,\n            props,\n            this.createReactChildWrap()\n          );\n          return React.createElement(\n            StylesProvider,\n            {\n              sheetsManager,\n              jss: create({\n                plugins: [...jssPreset().plugins],\n                insertionPoint: this.em.get('Canvas').getDocument().head\n              })\n            },\n            cmpMain\n          );\n        }\n      },\n      isComponent: (el) => el.tagName === type.toUpperCase()\n    });\n\n    Blocks.add(type, {\n      label: type,\n      category: 'MUI',\n      content: { type }\n    });\n    Blocks.add(type, {\n      label: type,\n      category: 'Theme UI',\n      content: { type }\n    });\n  };\n\n  addCmp({\n    type: 'MuiButton',\n    component: Button,\n    props: {\n      attributes: {\n        color: 'primary',\n        variant: 'contained'\n      },\n      components: 'Click me',\n      traits: [\n        {\n          type: 'select',\n          label: 'Variant',\n          name: 'variant',\n          options: [\n            { value: 'contained', name: 'Contained' },\n            { value: 'outlined', name: 'Outlined' }\n          ]\n        },\n\n        {\n          type: 'checkbox',\n          label: 'Disabled',\n          name: 'disabled'\n        },\n        {\n          type: 'select',\n          label: 'Color',\n          name: 'color',\n          options: [\n            { value: 'primary', name: 'Primary' },\n            { value: 'secondary', name: 'Secondary' }\n          ]\n        }\n      ]\n    }\n  });\n\n  addCmp({\n    type: 'Slider',\n    component: Slider,\n    props: {\n      stylable: false,\n      editable: true,\n      void: true,\n      attributes: {\n        min: 0,\n        max: 100\n      },\n      traits: [\n        {\n          type: 'number',\n          label: 'Min',\n          name: 'min'\n        },\n        {\n          type: 'number',\n          label: 'Max',\n          name: 'max'\n        }\n      ]\n    }\n  });\n\n  addCmp({\n    type: 'Snackbar',\n    component: (props) =>\n      React.createElement(SnackbarContent, {\n        ...props,\n        message: props.children\n      }),\n    props: {\n      stylable: true,\n      editable: true,\n      traits: []\n    }\n  });\n  addCmp({\n    type: 'Switch',\n    component: (props) =>\n        React.createElement(Switch, {\n          ...props\n        }),\n    props: {\n      stylable: false,\n      editable: true,\n      traits: []\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}